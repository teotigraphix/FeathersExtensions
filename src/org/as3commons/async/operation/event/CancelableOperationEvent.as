/*
* Copyright 2007-2011 the original author or authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.as3commons.async.operation.event {
	
	import flash.events.Event;
	
	import org.as3commons.async.operation.IOperation;
	
	/**
	 * An <code>OperationEvent</code> is an <code>Event</code> generated by an <code>ICancelableOperation</code> instance.
	 * @author Roland Zwaga
	 */
	public class CancelableOperationEvent extends Event {
		
		/** The type of the <code>CancelableOperationEvent</code> dispatched when an <code>ICancelableOperation</code> is canceled. */
		public static const CANCELED:String = "operationCanceled";
		
		/**
		 * Creates a new <code>CancelableOperationEvent</code> instance.
		 * @param type The type of the current <code>OperationEvent</code>, can be either <code>OperationEvent.COMPLETE</code>, <code>OperationEvent.ERROR</code> or <code>OperationEvent.PROGRESS</code>.
		 * @param operation The <code>IOperation</code> that generated the current <code>OperationEvent</code>.
		 */
		public function CancelableOperationEvent(type:String, operation:IOperation, bubbles:Boolean=false, cancelable:Boolean=false) {
			super(type, bubbles, cancelable);
			this.operation = operation;
		}
		
		private var _operation:IOperation;
		
		/**
		 * @return The <code>IOperation</code> that generated the current <code>OperationEvent</code>.
		 */
		public function get operation():IOperation {
			return _operation;
		}
		
		/**
		 * @private
		 */
		public function set operation(value:IOperation):void {
			if (value !== _operation) {
				_operation = value;
			}
		}
		
		/**
		 * @return An exact copy of the current <code>CancelableOperationEvent</code>
		 */
		override public function clone():Event {
			return new CancelableOperationEvent(type, operation, bubbles, cancelable);
		}
	}
}
